#!/usr/bin/env node

const program = require('commander')
const inquirer = require('inquirer')
const path = require('path')
const chalk = require('chalk')
const Table = require('cli-table')
const exportCmd = require('../src/commands/export')
const clean = require('../src/commands/clean')
const version = require('../package.json').version

const renderFilesTable = (paths, fontName, minify) => {
  let table = new Table({
    head: [chalk.yellow('from'), chalk.green('to')],
    chars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''}
  })

  exportCmd.getFiles(paths, fontName, minify).map((item) => {
    table.push([item.src, path.relative(process.cwd(), item.dest)])
  })

  return table
}

program
  .version(version)
  .usage('[options] <file ...>')
  .description('Update your icon library from Icomoon zip file')

program
  .command('export <fontName> <icomoonZipFile>')
  .alias('b')
  .description('Uncompresses the zip file generated by Icomoon and moves the files to the new destination.')
  .option('--css <path>', 'Specifies the path to copy the CSS file to.')
  .option('--css-name <name>', 'Specifies the file name for the CSS file.')
  .option('--docs <path>', 'Specifies the path to copy the docs to.')
  .option('--fonts <path>', 'Specifies the path to copy the fonts to.')
  .option('--fonts-public <path>', 'Overrides the public path to your fonts to use in the CSS.')
  .option('--force', 'Executes the command straight away without user confirmation.')
  .option('--json <path>', 'Specifies the path to copy the JSON file to.')
  .option('--no-minify', 'Skips CSS minification.')
  .option('--preprocessor <path>', 'Specifies the path to copy the preprocessor files to.')
  .action((fontName, icomoonZipFile, options) => {
    const paths = {
      css: options.css ? path.resolve(options.css) : undefined,
      cssName: options.cssName,
      docs: options.docs ? path.resolve(options.docs) : undefined,
      fonts: options.fonts ? path.resolve(options.fonts) : undefined,
      fontsPublic: options.fontsPublic,
      json: options.json ? path.resolve(options.json) : undefined,
      preProcessor: options.preprocessor ? path.resolve(options.preprocessor) : undefined
    }

    if (options.force === true) {
      return exportCmd.cmd(fontName, icomoonZipFile, paths, options.minify)
    }

    exportCmd.unzipIcomoon(icomoonZipFile)
      .then(() => {
        return inquirer.prompt([
          {
            type: 'confirm',
            name: 'proceed',
            message: `This is the list of files that will be copied once unzipped: \n${
              renderFilesTable(paths, fontName, options.minify)}\n Do you want to proceed?`
          }
        ])
      })
      .then(answers => {
        if (answers.proceed === false) {
          return exportCmd.removeTempDir().then(() => {
            console.log(chalk.white.bgRed('\n Cancelled by the user \n'))
          })
        }
        return exportCmd.cmd(fontName, icomoonZipFile, paths, options.minify).then(() => {
          console.log(chalk.bgGreen.black(' All done '))
        })
      })
      .catch(err => {
        console.log(chalk.bgRed.whiteBright(` ${err.message} `))
      })
  })

program
  .command('clean')
  .alias('c')
  .description('Cleans previously generated files.')
  .option('--css <path>', 'Specifies the path to copy the CSS file to.')
  .option('--docs <path>', 'Specifies the path to copy the docs to.')
  .option('--fonts <path>', 'Specifies the path to copy the fonts to.')
  .option('--force', 'Executes the command straight away without user confirmation.')
  .option('--json <path>', 'Specifies the path to copy the JSON file to.')
  .option('--preprocessor <path>', 'Specifies the path to copy the preprocessor files to.')
  .action(options => {
    const paths = []
    options.css && paths.push(path.resolve(options.css))
    options.docs && paths.push(path.resolve(options.docs))
    options.fonts && paths.push(path.resolve(options.fonts))
    options.json && paths.push(path.resolve(options.json))
    options.preprocessor && paths.push(path.resolve(options.preprocessor))

    if (options.force === true) {
      return clean(paths)
    }

    inquirer.prompt([
      {
        type: 'confirm',
        name: 'proceed',
        message: `This is the list of files that will be removed: \n\n${chalk.yellow(paths.map(
          (item) => path.relative(process.cwd(), item)).join('\n'))}\n\n Do you want to proceed?`
      }
    ]).then(answers => {
      if (answers.proceed === false) {
        return console.log(chalk.white.bgRed('\n Cancelled by the user \n'))
      }

      clean(paths)
    })
  })

program.parse(process.argv)

if (program.args.length === 0) program.help()
